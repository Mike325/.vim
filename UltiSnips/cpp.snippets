# Override cpp-snippets file

extends c

priority 10

snippet cla "class ... (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:/* Arguments */});
	${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/}& o);
	${1/(\w+).*/$1/}(${1/(\w+).*/$1/}&& o) noexcept;
	${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}& o);
	${1/(\w+).*/$1/}& operator=(${1/(\w+).*/$1/}&& o) noexcept;
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet cx "constexpr"
constexpr $0
endsnippet

snippet /forr|rfor|rloop/ "for(auto i : iterator) { ... }" r
for(auto ${1:i} : ${2:iterator}) {
	${0:// Code}
}
endsnippet

snippet method "class method ... (class)"
${1:auto} ${2:class}::${3:method}(${4:/* Arguments */}) {
	$0
}
endsnippet

snippet /co|cout/ "std::cout << ... (print)" r
std::cout << ${0:val} ;
endsnippet

snippet /(#)?inc(lude)?/ "#include ..." rb
#include <${1:iostream}>
endsnippet

snippet /t(p|em(plate)?)/ "template<typename T>" rb
template<typename ${1:T}>
endsnippet

snippet /c(x)?func/ "constexpr function ... (function)" r
constexpr ${1:auto} ${2:name}(${3:/* Args */}) {
	$0
}
endsnippet

snippet /c(ons(t)?)?var/ "const var ... (variable)" r
const ${1:auto} ${2:var} = ${0:0};
endsnippet

snippet /lam(bda)?/ "Lambda expression" r
[${1:&}](${2:/* Args */}){
	${3:${VISUAL}}
}$0
endsnippet

snippet /n(s|ame(space)?)/ "namespace ... (namespace)" r
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet /(end)|beg(in)?/ "std::(begin/end) ... (algorithm)" r
std::`!p snip.rv = 'begin' if match.group(1) is None else match.group(1)`(${1:iterator})$0
endsnippet

snippet /acc(umulate)?/ "std::accumulate ... (algorithm)" r
std::accumulate(${1:begin}, ${2:end}, ${4:init}, ${5:func});
endsnippet

snippet /(?P<find>fin(d)?)|(?P<copy>copy)|(?P<for_each>for(e|_(each)?))/ "std::(find/copy/for_each) ... (algorithm)" r
std::`!p
groups = match.groups()
if 'find' in groups:
    snip.rv = 'find'
elif 'copy' in groups:
    snip.rv = 'copy'
else:
    snip.rv = 'for_each'
`(${1:begin}, ${2:end}, ${5:func});
endsnippet

snippet /(?P<swap>sw(ap)?)|(?P<min>min)|(?P<max>max)/ "std::swap ... (algorithm)" r
std::`!p
groups = match.groups()
if 'swap' in groups:
    snip.rv = 'swap'
elif 'min' in groups:
    snip.rv = 'min'
else:
    snip.rv = 'max'
`(${1:begin}, ${2:end});
endsnippet
